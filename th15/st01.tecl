anim { "enemy.anm"; "st01enm.anm"; "idk.anm";}
ecli { "default.ecl"; "st01bs.ecl"; "st01mbs.ecl"; "st01mbs2.ecl"; }
#include "main.tecl"
void MainBossSpell();

void MainMBossSpell();



void LogoEnemy()
{
    wait(1410);
    stageLogo();
    return;
}

void Fairy1red()
{
	flagSet(4);
	anmSelect(2);
	anmSetMain(0, 5);
	Fairy1(0f);
}
void Fairy1blue()
{
	flagSet(4);
	anmSelect(2);
	anmSetMain(0, 0);
	Fairy1(30f);
}
void Fairy1redM()
{
	flagSet(4);
	anmSelect(2);
	anmSetMain(0, 5);
	Fairy1M(0f);
}
void Fairy1blueM()
{
	flagSet(4);
	anmSelect(2);
	anmSetMain(0, 0);
	Fairy1M(35f);
}


void Fairy1(float A)
{
	ins_569(1);
	@Fairy_1_2at() async;
	moveBezier(300, 0f, -600f-A, 300f, 200f-A, -100f, 800f-A);
	wait(300);
	flagClear(4);
	wait(1000);
}

void Fairy1M(float A)
{
	ins_569(1);
	@Fairy_1_2at() async;
	moveBezier(300, 0f, -600f-A, -300f, 200f-A, 100f, 800f-A);
	wait(300);
	flagClear(4);
	wait(1000);
}

void Fairy2red()
{
	flagSet(4);
	anmSelect(2);
	anmSetMain(0, 5);
	Fairy2(0f);
}
void Fairy2blue()
{
	flagSet(4);
	anmSelect(2);
	anmSetMain(0, 0);
	Fairy2(30f);
}

void Fairy2redM()
{
	flagSet(4);
	anmSelect(2);
	anmSetMain(0, 5);
	Fairy2M(0f);
}

void Fairy2blueM()
{
	flagSet(4);
	anmSelect(2);
	anmSetMain(0, 0);
	Fairy2M(30f);
}

void Fairy2(float A)
{
	ins_569(1);
	@Fairy_1_2at() async;
	moveBezier(300, 0f, 300f-A, 300f, 200f-A, -100f, -400f-A);
	wait(300);
	flagClear(4);
	wait(1000);
}

void Fairy2M(float A)
{
	ins_569(1);
	@Fairy_1_2at() async;
	moveBezier(300, 0f, 300f-A, -300f, 200f-A, 100f, -400f-A);
	wait(300);
	flagClear(4);
	wait(1000);
}

void Fairy_1_2at()
{
	int A = 160:140:80:40;
	etNew(0);
	etAim(0, 0);
	etSprite(0, 4, 4);
	etAngle(0, 0f, 0f);
	etCount(0, 1, 1:1:1:2);
	etSpeed(0, 1.4f:1.7f:2f:2.3f,  1.4f:1.7f:2f:1.7f);
	etEx(0, 0, EX_ANIM, 2, NEG, NEGF, NEGF);
	wait(75);
		while(1)
		{
		
			etOn(0);
			wait(A + _S(RANDF2 * (40f:30f:25f:15f)));
		}
}

void BFairy1()
{
	float x, y;
	int time = 150;
	flagSet(4);
	dropExtra(1, 6);
	dropExtra(2, 7);
	anmSelect(2);
	anmSetMain(0, 40);
	ins_569(100);
	floatTime(0, x, time, 0, ABS_X, -90f*F0);
	floatTime(1, y, time, 4, ABS_Y, 160f);
	movePosTime(time, 6, -90f*F0, 160f);
	BFairy1at() async;
	times(time)//
	{
		movePos(x, y);
		wait(1);
	}
	wait(1000);
}

void BFairy1at()
{
	float A = rad(90);
	etNew(1);
	etAim(1, 3);
	etSprite(1, 23, 4);
	etCount(1, 5:6:7:7, 1);
	etAngle(1, A, 0f);
	etSpeed(1, 2f:2f:2f:3f, 2f);
	wait(150);
	times(5)
	{
		etOn(1);
		etAngle(1, A + rad(10), 0f);
		etOn(1);
		etAngle(1, A - rad(10), 0f);
		etOn(1);
		wait(60:50:30:30);
		A = RANDRAD;
		etAngle(1, A, 0f);
	}
	moveVel(rad(90), 1.5f);
	wait(10000);
}


void Fairy3()
{
	float x, y;
	int time = 100;
	float angle = rad(90);
	flagSet(4);
	anmSelect(2);
	anmSetMain(0, I0);
	ins_569(1);
	floatTime(0, angle, time, 19, rad(90), F0);
	// floatTime(1, y, time, 4, ABS_Y, 160f);
	// movePosTime(time, 6, -50f*F0, 160f);
	Fairy3at() async;
	times(time)//
	{
		moveVel(angle, F1);
		wait(1);
	}
	flagClear(4);
	wait(1000);
}

void Fairy3at()
{
	float x, y, a;
	x = PLAYER_X;
	y = PLAYER_Y;
	etNew(0);
	etAim(0, 3);
	etSprite(0, 8, 6);
	etCount(0, 3:3:4:5, 1);
	etSpeed(0, 0.1f, 0.1f);
	etAngle(0, ANGLE_PLAYER, 0f);
	etEx(0, 0, EX_ANIM, 1, NEG, NEGF, NEGF);
	etEx(0, 0, EX_WAIT, 60, NEG, NEGF, NEGF);
	etEx(0, 0, EX_VELTIME, 60, NEG, 1f:1f:1.5f:1.5f, NEGF);
	wait(30);
	while(1)
	{
		mathAngle(a, ABS_X, ABS_Y, x, y); 
		etAngle(0, a, 0f);
		etOn(0);
		wait(60:50:30:20);
	}
}

void YingYang1()
{
	anmSelect(2);
	anmSetSprite(0, 62);
	flagSet(2);
	moveVel(rad(90) + RANDRAD / 32f, 2f);
	dropExtra(1, 2);
	dropExtra(2, 2);
	YingYang1_at();
	wait(1000);
}

void YingYang1_at()
{
	etNew(0);
	if(RAND % 2)
	{
		etSprite(0, 6, 4);
	}else{
		etSprite(0, 6, 6);
	}
	etSpeed(0, 1.5:2f:2.5f:3f, 1.5f);
	etAngle(0, 0f, 0f);
	etCount(0, 1:1:1:1, 1:1:3:5);
	etEx(0, 0, EX_ANIM, 1, NEG, NEGF, NEGF);
	times(2:3:4:5)
	{
		etOn(0);
		wait(50:40:30:30);
	}
}

void Fairy4()
{
	flagSet(4);
	anmSelect(2);
	anmSetMain(0, ENM_GIRL_L);
	anmSetSprite(1, ENM_AURA_M_LIGHTBLUE);
	ins_569(1);
	dropExtra(1, 3);
	dropExtra(2, 2);
	moveVel(F0+RANDF2*rad(20), 2.5f);
	Fairy4at() async;
	flagClear(4);
	wait(1000);
}

void Fairy4at()
{
	float x, y, a;
	x = PLAYER_X;
	y = PLAYER_Y;
	etNew(0);
	etAim(0, 3);
	etSprite(0, 8, 4);
	etCount(0, 5:5:6:8, 3);
	etSpeed(0, 1f, 0.1f);
	etAngle(0, ANGLE_PLAYER, 0f);
	etEx(0, 0, EX_ANIM, 1, NEG, NEGF, NEGF);
	etEx(0, 0, EX_WAIT, 60, NEG, NEGF, NEGF);
	etEx(0, 0, EX_VELTIME, 60, NEG, 2f:2f:2f:2.5f, NEGF);
	Fairy4_at2() async;
	wait(20);
	while(1)
	{
		mathAngle(a, ABS_X, ABS_Y, x, y); 
		etAngle(0, a, 0f);
		etOn(0);
		wait(35:25:20:10);
	}
}

void Fairy4_at2()
{
	etNew(1);
	etAim(1, 4);
	etSprite(1, 6, 8);
	etCount(1, 6:9:12:15, 1:1:2:2);
	etSpeed(1, 2f, 2f);
	etAngle(1, 0f, 0f);
	etEx(1, 0, EX_ANIM, 0, NEG, NEGF, NEGF);
	wait(20);
	while(1)
	{
		times(5)
		{
			etOn(1);
			wait(5);
		}
		wait(45:30:20:20);
	}
}

void BigFairy()
{
	flagSet(4);
	anmSelect(2);
	anmSetMain(0, ENM_GIRL_L);
	anmSetSprite(1, ENM_AURA_L_DARKRED);
	dropExtra(1, 4);
	dropExtra(2, 3);
	BigFairy_at() async;
	float A = rad(-10);
	if(F0 < rad(90))
	{
		A = rad(10);
	}
	moveVel(F0+A, 1.5f);
	wait(1000);
}

void BigFairy_at()
{
	etNew(0);
	etAim(0, 2);
	etSprite(0, 6, 6);
	etCount(0, 8:12:14:16, 2:2:3:3);
	etSpeed(0, 1f, 1.25f);
	etCopy(1, 0);
	etSprite(1, 6, 8);
	etAim(1, 4);
	etCount(1, 4:6:7:8, 2:2:3:3);
	etSpeed(1, 1.5f, 1.75f);
	etCopy(2, 0);
	etSprite(2, 6, 4);
	etCount(2, 2:3:3:8, 2:2:3:3);
	etSpeed(2, 2f, 2.25f);
	etExSet(0, 0, 0, EX_ANIM, 1, NEG, NEGF, NEGF); 
	etExSet(1, 0, 0, EX_ANIM, 1, NEG, NEGF, NEGF); 
	etExSet(2, 0, 0, EX_ANIM, 1, NEG, NEGF, NEGF); 
	wait(60);
	while(1)
	{
		etOn(0);
		etOn(1);
		etOn(2);
		etOn(3);
		wait(120);
	}
}

void littleFairy()
{
	anmSelect(2);
	anmSetMain(0, 0);
	dropExtra(1, 1);
	dropExtra(2, 1);
	littleFairy_at() async;
	float A = rad(-90);
	if(F0 < rad(90))
	{
		A = rad(90);
	}
	moveVel(F0+A+RANDF2*rad(30), 4f);
	wait(1000);
}


void littleFairy1()
{
	anmSelect(2);
	anmSetMain(0, 5);
	float A = rad(-90);
	dropExtra(1, 1);
	dropExtra(2, 1);
	littleFairy_at() async;
	if(F0 < rad(90))
	{
		A = rad(90);
	}
	moveVel(F0+A+RANDF2*rad(30), 4f);
	wait(1000);
}

void littleFairy_at()
{
	etNew(0);
	etAim(0, 0);
	etCount(0, 1, 1:1:2:2);
	etAngle(0, 0f, 0f);
	etSprite(0, 4, 7);
	etSpeed(0, 1f:2f:2f:2f, 1f:2f:3f:4f);
	etExSet(0, 0, 0, EX_ANIM, 1, NEG, NEGF, NEGF); 
	wait(60);
	while(1)
	{
		etOn(0);
		wait(100:110:110:100);
	}
}

void MiddleFairy()
{
	anmSelect(2);
	anmSetMain(0, ENM_GIRL_M_RED);
	anmSetSprite(1, ENM_AURA_S_DARKPURPLE);
	dropExtra(1, 1);
	dropExtra(2, 5);
	@MiddleFairy_at() async;
	float A = rad(90);
	if(ABS_X < 0f)
	{
		times(180)
		{
			moveVel(A, 2f);
			A -= rad(90)/180f;
			wait(1);
		}
	}else{
		times(180)
		{
			moveVel(A, 2f);
			A += rad(90)/180f;
			wait(1);
		}
	}
}



void MiddleFairy_at()
{
	etNew(0);
	etAim(0, 7);
	etSprite(0, 33, 2 + RAND % 2);
	etCount(0, 5:8:10:12, 1:2:2:3);
	etAngle(0, 0f, rad(20));
	etSpeed(0, 2f, 3f);
	wait(30);
	while(1)
	{
		etOn(0);
		wait(100);
	}
	
}



void Vaguetest()
{
	float x, y, a, c, d;
	int time = 350;
	anmSelect(2);
	anmSetMain(0, 0);
	flagSet(32);
	@Vaguetest_at() async;
	c = ABS_X;
	d = ABS_Y;
	floatTime(0, x, time, 0, ABS_X, 150f+_f(I0 * 5));
	floatTime(1, y, time, 30, ABS_Y, 170f+_f(I0 * 10));
	movePosTime(time, 0, 150f+_f(I0 * 5), 170f+_f(I0 * 10));
	times(time)//
	{
		c = y;
		wait(1);
		mathAngle(F1, x-1f, c, x, y);
		movePos(x, y);
	}
	// movePos(x, y);
	// mathAngle(a, ABS_X-1f, c, ABS_X, ABS_Y);
	//moveVel(a, 3f);
	wait(1000);
}

void Vaguetest_at()
{
	float a = rad(290);
	int B = 0;
	etNew(0);
	etAim(0, 1);
	etSprite(0, 27, 0);
	etCount(0, 1, 1);
	etSpeed(0, 0f, 0f);
	etAngle(0, ABS_ANGLE, 0f);
	etEx(0, 0, EX_BRIGHT, 1, NEG, NEGF, NEGF);
	etEx(0, 0, EX_VELTIME, 120, NEG, 2f, F1);
	//etEx(0, 0, EX_ACCEL, 140, 
	floatTime(2, a, 350, 1, a, rad(430));
	while(1)
	{
			etAngle(0, F1, 0f);
			etExSet(0, 1, 0, EX_VELTIME, 120, NEG, 2f, F1);
			//etExSet(0, 0, 0, EX_VELTIME, 90, NEG, 1.5f, a);
			B += 1;
			if(B == 5)
			{
				etOn(0);
				B = 0;
			}
			wait(1);
	}
}


void MainBoss()
{
    dialogWait();
    enmCreateA("Boss", 144.0f, -16.0f, 40, 1000, 1);
    dialogWait();
+1: //1
    bossWait();
    setChapter(81);
+60: //61
    dialogRead(1);
    dialogWait();
    return;
    return;
}

void MainBossDebug()
{
+10: //10
    dialogRead(0);
    @MainBoss();
    return;
}

void MainBossDebug2()
{
+10: //10
    dialogRead(-1);
    @MainBoss();
    return;
}

void MainFront()
{
    @MainSub00();
    wait(320);
    setChapter(2);
	wait(120);
	@MainSub01()async;
	@MainSub02();
	wait(440);
	setChapter(3);
	// @MainSub03test();
    return;
}

void MainLatter()
{
	@MainSub03();
	wait(120);
	setChapter(6);
	wait(60);
	@MainSub04();
	setChapter(7);
	wait(60);
    return;
}

void MainMBossDebug()
{
    setChapter(22);
    enmCreateA("MBoss", 112.0f, -32.0f, 40, 1000, 1);
    goto MainMBossDebug_148 @ 0;
MainMBossDebug_128:
    wait(1000);
MainMBossDebug_148:
    if (1) goto MainMBossDebug_128 @ 0;
    return;
}

void MainMsgDebug()
{
    callSTD(1);
+10: //10
    dialogRead(0);
    dialogWait();
+1: //11
    dialogWait();
+60: //71
    dialogRead(1);
    dialogWait();
    goto MainMsgDebug_184 @ 4071;
MainMsgDebug_168:
+4000: //4071
    nop();
MainMsgDebug_184:
    if (1) goto MainMsgDebug_168 @ 71;
    return;
}


void MainSub00()
{
	times(15)//
	{
		enmCreate("Fairy2red", -230f, 135f, 70, 100, 1);
		enmCreate("Fairy2blue", -230f, 90f, 70, 100, 2);
		wait(23);
	}
	times(15)//
	{
		enmCreate("Fairy2redM", 230f, 135f, 70, 100, 1);
		enmCreate("Fairy2blueM", 230f, 90f, 70, 100, 2);
		wait(23);
	}
	times(19)//
	{
		enmCreate("Fairy1red", -230f, 235f, 50, 100, 1);
		enmCreate("Fairy1blue", -230f, 205f, 70, 100, 2);
		enmCreate("Fairy1redM", 230f, 235f, 50, 100, 1);
		enmCreate("Fairy1blueM", 230f, 205f, 70, 100, 2);
		wait(23);
	}
}

void MainSub01()
{
	times(10)
	{
		F0 = rad(0);
		I0 = 0;
		F1 = 3.2f;
		enmCreate("Fairy3", 20f, 0f, 50, 100, 2);
		F1 = 3f;
		I0 = 5;
		enmCreate("Fairy3", 60f, 0f, 50, 100, 1);
		F0 = rad(180);
		F1 = 3.2f;
		I0 = 0;
		enmCreate("Fairy3", -20f, 0f, 50, 100, 2);
		I0 = 5;
		F1 = 3f;
		enmCreate("Fairy3", -60f, 0f, 50, 100, 1);
		wait(20);
	}
	
	wait(1000);
}

void MainSub02()
{
	wait(180);
	F0 = 1f;
	enmCreate("BFairy1", -200f, -50f, 1000, 1000, 1);
	wait(120);
	F0 = -1f;
	enmCreate("BFairy1", 200f, -50f, 1000, 1000, 1);
	times(30)
	{
		enmCreate("YingYang1", RANDF2 * 192f, -40f, 100, 100, 1);
		wait(30);
	}
}

void MainSub0Xtest()
{
	float A, B;
	A = -282f;
	I0 = 0;
	times(12)
	{
		enmCreate("Vaguetest", A, 448f, 100, 100, 1);
		I0 += 1;
		A = A + 15f;
		wait(5);
	}
	wait(10000);
}

void MainSub03()
{
	F0 = rad(180);
	float A = 1f;
	times(20)
	{
		enmCreateF("Fairy4", 200f*A, 128f+RANDF2*28f,300, 100, 0);
		wait(90);
		A *= -1f;
		F0 += rad(180);
	}
	
}

void MainSub04()
{
	F0 = rad(135);
	enmCreate("BigFairy", 200f, -40f, 600, 100, 0);
	times(10)
	{
		enmCreate("littleFairy", -192f + RANDF*55f, -30f, 45, 10, 0);
		wait(5+RAND % 11);
		enmCreate("littleFairy1", -200f, 0f + RANDF*55f, 45, 10, 0);
		wait(5+RAND % 11);
	}
	wait(100);
	F0 = rad(45);
	enmCreate("BigFairy", -200f, -40f, 600, 100, 0);
	times(10)
	{
		enmCreate("littleFairy", 192f - RANDF*55f, -30f, 45, 10, 0);
		wait(5+RAND % 11);
		enmCreate("littleFairy1", 200f, 0f + RANDF*55f, 45, 10, 0);
		wait(5+RAND % 11);
	}
	wait(100);
	
	@MainSub04_alt();
	
	
	F0 = rad(45);
	enmCreate("BigFairy", -200f, -40f, 600, 100, 0);
	times(20)
	{
		enmCreate("littleFairy", 192f - RANDF*55f, -30f, 45, 10, 0);
		wait(5+RAND % 5);
		enmCreate("littleFairy1", 200f, 0f + RANDF*55f, 45, 10, 0);
		wait(5+RAND % 5);
	}
	wait(100);
	F0 = rad(135);
	enmCreate("BigFairy", 200f, -40f, 600, 100, 0);
	times(20)
	{
		enmCreate("littleFairy", -192f + RANDF*55f, -30f, 45, 10, 0);
		wait(5+RAND % 5);
		enmCreate("littleFairy1", -200f, 0f + RANDF*55f, 45, 10, 0);
		wait(5+RAND % 5);
	}
	wait(200);
	
	// enmCreate("LastFairy", 0f, -40f, 2000, 1000, 0);
}


void MainSub04_alt()
{
	enmCreate("MiddleFairy", -40f, -40f, 600, 50, 0);
	enmCreate("MiddleFairy", 40f, -40f, 600, 50, 0);
	wait(200);
}


void MapleEnemy()
{
    var A;
    flagSet(32);
    $A = 60;
    goto MapleEnemy_164 @ 0;
MapleEnemy_120:
    anmPlayAbs(1, 102);
    wait(4);
MapleEnemy_164:
    if ($A--) goto MapleEnemy_120 @ 0;
    goto MapleEnemy_276 @ 0;
MapleEnemy_232:
    anmPlayAbs(1, 102);
    wait(5);
MapleEnemy_276:
    if (1) goto MapleEnemy_232 @ 0;
    delete();
}

void Test1()
{
	flagSet(1);
	flagSet(2);
	anmSelect(2);
	anmSetSprite(0, 5);
	etAim(1, 0);
	etCount(1, 10, 1);
	etSprite(1, 12, 2);
	etAngle(1, 0f, rad(4));
	etSpeed(1, 2f, 2f);
	etEx(1, 0, EX_SIZE, 120, 0, 1f, 0f);
	while(1)
	{
		etOn(1);
		wait(20);
	}
}


void main()
{
    flagSet(32);
    wait(1);
    setChapter(0);
    debug22(1, "MainMBossDebug");
    debug22(2, "MainBossDebug");
    debug22(3, "MainBossDebug2");
    debug22(4, "MainMsgDebug");
    debug22(5, "MainLatter");
    @LogoEnemy() async;
+60: //60
    nop();
	// wait(100000);
	dialogRead(5);
	wait(300);
	setChapter(1);
    wait(2);
	// enmCreate("testLance", -192f, 320f, 1000, 1000, 1);
    @MainFront();
    enmKillAll();
    etClear(640.0f);
    setChapter(4);
    wait(2);
	dialogRead(6);
	dialogWait();

	enmCreateA("MBoss", 192.0f, -32.0f, 40, 1000, 1);
	bossWait();
	// etNew(0);
	// etAim(0, 1);
	// etCount(0, DS3, 1);
	// etAngle(0, rad(90), rad(30));
	// etSpeed(0, 1f, 1f);
	// etSprite(0, 4, 4);
	// etOn(0);
    @MainLatter();
    etClear(640.0f);
	enmKillAll();
	bossWait();
	wait(100);
    setChapter(41);
    dialogRead(0);
    @MainBoss();
	while(1)
	{	
+1:
	}
    delete();
}

void main1()
{
    flagSet(32);
    wait(60);
    enmCreate("abysse", 0f, 128f, 1000, 100, 0);
	// wait(60);
	// etNew(0);
	// etAim(0, 0);
	// etSprite(0, 12, 1);
	// etCount(0, [-9905], 1);
	// etAngle(0, 0f, rad(5));
	// etSpeed(0, 3f, 3f);
	// etOn(0);
	// anmPlay(1, 197);
	// anmPlay(4, 0);
	// enmCreate("GirlB06", 0f, 128f, 10000000, 100, 1);
	//0x4E7400C score (memory adress)
	//0x42eed1 GF7 (function)
	// GF7 = 999999999f;
    wait(1000);
}
void abysse() {
    anmSelect(2);
    anmSetMain(0, 5);
	etNew(9);
	etAim(9, 3);
	etAngle(9, rad(90), 0f);
	etCount(9, 8, 1);
	etSpeed(9, 2f, 2f);
	etSprite(9, 8, 8);
	etEx(9, 0, EX_BOUNCE, 1, 15, NEGF, NEGF);
	etOn(9);
    wait(10000);
}

void Bowap()
{
	float A = rad(-10);
	float B = rad(0);
	etNew(9);
	etAim(9, 3);
	etAngle(9, A, 0f);
	etCount(9, 8, 1);
	etSpeed(9, 2f, 2f);
	etSprite(9, 8, 8);
	while(1)
	{
		etOn(9);
		A += rad(1);
		// B -= rad(0.2);
		etAngle(9, cos(A), 0f);
		wait(3);
	}
}

void testLance()
{
	float x, y;
	anmSelect(2);
	anmSetMain(0, 0);
	setBoss(0);
	etNew(0);
	etAim(0, 0);
	etSprite(0, 8, 2); //29 -> sprite de bullet défini selon la liste
	//1 -> couleur, ici rouge
	etCount(0, 1, 1); //10 -> nombre de bullet des "lignes"
	//5 -> nombre de bullet des "colonnes"
	etSpeed(0, 0f, 0f); //0 -> id du pattern;
	spellEnd();
    funcSet(0);
	$CAPTURE = 1;
	wait(200);
	spell(2, 5400, 500000, "Une jeune fille au QI d'or");
	//2f -> vitesse minimale bullet des "colonnes"
	//4f -> vitesse maximale des bullet des "colonnes" ((((x - 0.4f)*(x - 0.4f) / 0.36f) - 0.444444f) / 0.555556f)
	// floatTime(0, y, 384, 1, 224f, 0f);
	// times(384)
	// {
		// movePos(ABS_X + 1f, y);
		// etAngle(0, ABS_ANGLE, 0f);
		// wait(1);
		// etOn(0);
	// }
	wait(100000);
}