#include "main.tecl"
void BossItemCard();

void BossItemPhase(var A, var B, var C);

void EffChargePoint3(var A, var B, var C, var D, var E, var F);

void MBoss()
{
    setBoss(0);
    $MISS_COUNT = 0;
    $BOMB_COUNT = 0;
    $CAPTURE = 1;
    enmKillAll();
    timerReset();
    enmCreate("Ecl_EtBreak_ni", 0.0f, 0.0f, 9999, 0, 0);
    anmSelect(1);
    anmSetSprite(1, 107);
    anmSetSprite(2, 120);
    anmSelect(4);
    anmSetMain(0, 0);
    ins_569(-1);
    flagSet(76);
    setHurtbox(48.0f, 48.0f);
    setHitbox(40.0f, 40.0f);
    lifeSet(2200);
    movePos(-192.0f, -64.0f);
    movePosTime(100, 4, 0.0f, 128.0f);
    wait(40);
    moveLimit(0.0f, 128.0f, 280.0f, 256.0f);
    dialogWait();
    setNext(1, 2200, 1500, "MBossCard2");
    setTimeout(1, "MBossEscape");
    fog(140.0f, 16748431);
    @MBoss2();
    goto MBoss_784 @ 0;
MBoss_764:
    wait(1000);
MBoss_784:
    if (1) goto MBoss_764 @ 0;
    delete();
}

void MBoss1()
{
    setInvuln(60);
    @EffChargePoint3(1.5707964f, 0.5235988f, 8, 9, 9, 9);
    wait(6000);
    @MBossCard1();
    return;
}

void MBoss2()
{
    lifeSet(2200);
    setInvuln(180);
    unless ($TIMEOUT == 0) goto MBoss2_200 @ 0;
    etCancel(640.0f);
    goto MBoss2_220 @ 0;
MBoss2_200:
    etClear(640.0f);
MBoss2_220:
+2: //2
    setChapter(23);
+2: //4
    ins_569(1);
    moveLimit(0.0f, 128.0f, 280.0f, 96.0f);
    @BossItemPhase(60, 30, 64.0f);
    timerReset();
    killAllAsync();
    enmKillAll();
    unless ($TIMEOUT == 0) goto MBoss2_524 @ 4;
    etCancel(640.0f);
    goto MBoss2_544 @ 4;
MBoss2_524:
    etClear(640.0f);
MBoss2_544:
    spellEnd();
    funcSet(0);
    reset();
    playSound(27);
    moveVel(0.0f, 0.0f);
    moveVelTime(0, 0, 0.0f, 0.0f);
    movePosTime(0, 0, 0.0f, 0.0f);
    $MISS_COUNT = 0;
    $BOMB_COUNT = 0;
    $CAPTURE = 1;
    anmSelect(4);
    anmSetMain(0, 0);
    wait(160);
    @MBossCard2();
    return;
}

void MBoss3()
{
    lifeSet(3000);
    setInvuln(180);
    unless ($TIMEOUT == 0) goto MBoss3_200 @ 0;
    etCancel(640.0f);
    goto MBoss3_220 @ 0;
MBoss3_200:
    etClear(640.0f);
MBoss3_220:
+2: //2
    setChapter(24);
+2: //4
    ins_569(1);
    moveLimit(0.0f, 128.0f, 280.0f, 96.0f);
    @BossItemPhase(60, 30, 64.0f);
    timerReset();
    killAllAsync();
    enmKillAll();
    unless ($TIMEOUT == 0) goto MBoss3_524 @ 4;
    etCancel(640.0f);
    goto MBoss3_544 @ 4;
MBoss3_524:
    etClear(640.0f);
MBoss3_544:
    spellEnd();
    funcSet(0);
    reset();
    playSound(27);
    moveVel(0.0f, 0.0f);
    moveVelTime(0, 0, 0.0f, 0.0f);
    movePosTime(0, 0, 0.0f, 0.0f);
    $MISS_COUNT = 0;
    $BOMB_COUNT = 0;
    $CAPTURE = 1;
    anmSelect(4);
    anmSetMain(0, 0);
    wait(160);
    @MBossCard3();
    return;
}

void MBossCard1()
{
    unless ($TIMEOUT == 0) goto MBossCard2_160 @ 0;
    etCancel(640.0f);
    goto MBossCard2_180 @ 0;
MBossCard2_160:
    etClear(640.0f);
MBossCard2_180:
+2: //2
    setChapter(31);
+2: //4
    ins_569(1);
    @BossItemCard();
    timerReset();
    killAllAsync();
    enmKillAll();
    unless ($TIMEOUT == 0) goto MBossCard2_428 @ 4;
    etCancel(640.0f);
    goto MBossCard2_448 @ 4;
MBossCard2_428:
    etClear(640.0f);
MBossCard2_448:
    spellEnd();
    funcSet(0);
    reset();
    playSound(27);
    moveVel(0.0f, 0.0f);
    moveVelTime(0, 0, 0.0f, 0.0f);
    movePosTime(0, 0, 0.0f, 0.0f);
    $MISS_COUNT = 0;
    $BOMB_COUNT = 0;
    $CAPTURE = 1;
    setNext(0, 0, 4200, "MBoss2");
    spellEx(106, 4200, 500000, "Corruption ”Essaim de Crawlers Parasites”");
    movePosTime(60, 4, 0.0f, 128.0f);
    moveLimit(0.0f, 128.0f, 240.0f, 44.0f);
    anmPlay(1, 73);
+90: //94
    nop();
	@WormHole()async;
	while(1)
	{
		wait(120);
		moveRand(60, 4, 2f);
	}
}


void WormHole()
{
	float A = 0f;
	float B = 0f;
	float C = 0f;
	etNew(0);
	etAim(0, 3);
	etSprite(0, 8, 2);
	etCount(0, 1, 1);
	etSpeed(0, 3f, 3f);
	etExSet(0, 0, 0, EX_ANIM, 0, NEG, NEGF, NEGF);
	etExSet(0, 1, 0, EX_BOUNCE, 1, 15, NEGF, NEGF);
	etExSet(0, 2, 0, EX_MOVE, 1, 0, 0f, 200f);
	etExSet(0, 3, 0, EX_SETSPRITE, 20, 4, NEGF, NEGF);
	while(1)
	{
		A = B;
		times(6)
		{
			etAngle(0, A, 0f);
			etExSet(0, 4, 0, EX_VEL, NEG, NEG, A, NEGF);
			etOn(0);
			A += rad(60);
		}
        B += C;
		C += rad(1);
		wait(4);
	}
}

void MBossCard1_2at (int etId, int color , float angle , float x) {
	int A = 0;
	
	etNew(etId);
	etAim(etId, 1);
	etAngle(etId, angle , 0f);
	etSprite(etId, 20 , color);
	etCount(etId, 1 , 1);
	etSpeed(etId, 3f , 3f);
	etExSet(etId , 0 , 0 , EX_INVULN , 60 , NEG , NEGF , NEGF);
	etExSet(etId, 1, 0, EX_WAIT, 10, NEG, NEGF, NEGF);
	etExSet(etId, 2, 0, EX_BOUNCE, 1, 15, 3f, NEGF);
	etExSet(etId, 3, 0, EX_WAIT, 52 + A, NEG, NEGF, NEGF);
	etExSet2(etId, 4, 0, EX_ANGLE, 90, 1, 1, NEG, 0f, 3f, NEGF, NEGF);
	//etExSet(etId, 5, 0, EX_BOUNCE, 1, 15, 0.5f, NEGF);
	etExSet(etId, 5, 0, EX_SPECIAL , NEG, NEG, NEGF, NEGF);	
	etExSub(etId , 5 , "cercle");
	etExSet(etId,  7 , 0, EX_DELETE , 0 , NEG , NEGF , NEGF);
	
	times(5){
		etOffsetAbs(etId,  x , 448f * RANDF);
		etOn(etId);
		A = A + 10;
		etExSet(etId, 3, 0, EX_WAIT, 52 - A, NEG, NEGF, NEGF);
		wait(10);
	}		
	
}

void cercle() {
	etNew(4);
	etAim(4 , 2);
	etCount(4,8,1);
	etSpeed(4, 1f , 1f);
	etSprite(4, 34 , 9);
	etOn(4);
}

void MBossCard2()
{
    unless ($TIMEOUT == 0) goto MBossCard2_160 @ 0;
    etCancel(640.0f);
    goto MBossCard2_180 @ 0;
MBossCard2_160:
    etClear(640.0f);
MBossCard2_180:
+2: //2
    setChapter(32);
+2: //4
    ins_569(1);
    @BossItemCard();
    timerReset();
    killAllAsync();
    enmKillAll();
    unless ($TIMEOUT == 0) goto MBossCard2_428 @ 4;
    etCancel(640.0f);
    goto MBossCard2_448 @ 4;
MBossCard2_428:
    etClear(640.0f);
MBossCard2_448:
    spellEnd();
    funcSet(0);
    reset();
    playSound(27);
    moveVel(0.0f, 0.0f);
    moveVelTime(0, 0, 0.0f, 0.0f);
    movePosTime(0, 0, 0.0f, 0.0f);
    $MISS_COUNT = 0;
    $BOMB_COUNT = 0;
    $CAPTURE = 1;
    setNext(0, 0, 3000, "MBoss3");
    spellEx(107, 3000, 500000, "超特急「ドリームエクスプレス」");
    movePosTime(60, 4, 0.0f, 144.0f);
    moveLimit(0.0f, 128.0f, 280.0f, 64.0f);
    wait(60);
    anmPlay(1, 73);
+90: //94
    nop();
    anmPlay(1, 88);
	MBossCard2_at();
}
void MBossCard2_at() {
	int et2 = 2;
	etNew(et2);
	etAim(et2, 3);
	etSprite(et2, 8, 2);
	etCount(et2, 1, 1);
	etSpeed(et2, 2f, 2f);
	int et = 7;
	etNew(et);
	etAim(et, 3);
	etSprite(et, 4, 4);
	etCount(et, 1, 1);
	etSpeed(et, 0f, 0f);

	etEx(et2, 0, 2, 1, -999999, -999999f, -999999f);
	//etEx(et2, 0, -2147483648, 40,-999999,  -999999f, -999999f);
	// etEx(et2, 0, 4, 60,-999999,  -4f/60f, -999999f);// etExAccel(et2, 0, 60, -4f/60f, NEGF);
	//etEx(et2, 0, -2147483648, 60,-999999,  -999999f, -999999f);// etExWait(et2, 0, 60);
	//etEx(et2, 0, 4, 60,-999999,  3f/60f, -999999f);// etExAccel(et2, 0, 60, 6f/60f, NEGF);
	ellipse(3,2, rad(0.2), rad(137.5), 1f) async;
	ellipse(4,2, rad(-0.2), rad(-137.5), -1f) async;
	
	//ellipse2(5,rad(0.4), rad(137.5), 1f) async;
	
	while(1){
		ellipse2(6, rad(1), rad(-137.5), -1f, RANDF2*rad(360));
		+200:
	}
}

void ellipse(int et, int etSrc, float step, float angle_step, float neg_)
{
	float t = 0f;
	float a = ABS_X;
	float b = ABS_Y;
	float x = 0f;
	float y = 0f;
	float c = 70f;
	float d = 70f;
	float n1 = 5f;
	float n2 = 6f;
	float angle = rad(90);
	etCopy(et, etSrc);
	etEx(et, 0, EX_ANIM, 1, NEG, NEGF, NEGF);
	while(1){
		y = c*cos(n1*t)+10f*cos(3f*t);
		x = d*sin(n2*t)+10f*sin(10f*t);
		etOffsetAbs(et, x+a, y+b);
		etAngle(et, angle, 0f);
		etOn(et);
		t += step;
		angle += angle_step;
		angle_step += rad(0.8)*neg_;
		wait(1);
    }
}

float cos_p(float n, float c, float t, float N, float N1){
	return n*cos(2f*PI*t*c*N/N1);
}
float sin_p(float n,float c,float t, float N, float N1){
	return n*sin(2f*PI*t*c*N/N1);
}

void ellipse2(int et,float step, float angle_step, float neg_, float begin)
{
	float t = begin;
	float a = ABS_X;
	float b = ABS_Y;
	float x = 0f;
	float y = 0f;
	float c = 70f;
	float d = 70f;
	float n1 = 5f;
	float n2 = 6f;
	float angle = rad(90);
	etCopy(et, 7);
	etExSet(et, 0, 0,EX_ANIM, 1, NEG, NEGF, NEGF);
	etExSet(et, 1, 0, EX_WAIT, 120 ,NEG, NEGF, NEGF);
	etExSet(et, 2, 0, EX_ACCEL, 60,NEG,  1f/60f, NEGF);
	// etExWait(et2, 0, 60);
	// etExAc
	while(t <= rad(360)+begin){
		
		
		x = cos_p(11f, -2f, t, 1f, 3f)+cos_p(12f, -5f,t, 2f, 3f)+cos_p(23f, 2f,t, 3f, 3f);
		y = sin_p(11f, -2f, t, 1f, 3f)+sin_p(12f, -5f,t, 2f, 3f)+sin_p(23f, 2f,t, 3f, 3f);
		//mathAngle(angle, BOSS_X, BOSS_Y, 2f*x+a,2f*y+b);
		etOffsetAbs(et, 3f*x+a, 3f*y+b);
		etAngle(et, angle, 0f);
		etOn(et);
		t += step;
		angle+= angle_step;
		wait(1);
    }
}



void MBossCard2_at_()
{
	float A, C, B = 0f, D = 1f, E = 1f;
	int color = 0;
	etNew(0);
	etAim(0, 1);
	etCount(0, 10, 2);
	etAngle(0, rad(90),rad(10));
	etSpeed(0, 3f, 2f);
	etSprite(0, 6, 2);
	etExSet(0, 0, 0, EX_ANIM, 0, NEG, NEGF, NEGF);
	//MBossCard2_at1() async;
	//MBossCard2_at2() async;
	while(1)
	{
		// etSprite(0, 6, 2);
		// etAngle(0, A*rad(-90)-rad(90), 0f);
		// etOn(0);
		A = cos(B);
		C = sin(B);
		if(C < 0f)
		{
			D = -1f;
		}else{
			D= 1f;
		}
		if(A < 0f)
		{
			E = -1f;
		}else{
			E= 1f;
		}
		etSprite(0, 6, 2);		
		etCount(0, _S(C*D*10f), 2);
		etAngle(0, rad(-90),A*rad(-90)+rad(90));
		etOn(0);
		etSprite(0, 6, 4);
		etCount(0, _S(A*E*10f), 2);
		etAngle(0, rad(-90),C*rad(-90)+rad(90));
		etOn(0);
		B += 0.05;
		wait(5);
	}
}
void MBossCard2_at1()
{
	float A=0f, C, B = 0f, D = 1f, E = 1f;
	int color = 0;
	etNew(1);
	etAim(1, 1);
	etCount(1, 3, 2);
	etAngle(1, rad(0),rad(10));
	etSpeed(1, 3f, 3f);
	etSprite(1, 12, 2);
	while(1)
	{
		etAngle(1, rad(0)+A*1.5f,rad(10));
		etOn(1);
		etAngle(1, rad(180)+A*1.5f,rad(10));
		etOn(1);
		B += 0.025;
		A = sin(B);
		wait(3);
	}
}
void MBossCard2_at2()
{
	float A=0f, C, B = 0f, D = 1f, E = 1f;
	int color = 0;
	etNew(2);
	etAim(2, 2);
	etCount(2, 20, 1);
	etAngle(2, rad(0),rad(0));
	etSpeed(2, 4f, 4f);
	etSprite(2, 33, 0);
	while(1)
	{
		etOn(2);
		wait(120);
	}
}

void MBossCard3()
{
    unless ($TIMEOUT == 0) goto MBossCard3_160 @ 0;
    etCancel(640.0f);
    goto MBossCard3_180 @ 0;
MBossCard3_160:
    etClear(640.0f);
MBossCard3_180:
+2: //2
    setChapter(33);
+2: //4
    ins_569(1);
    @BossItemCard();
    timerReset();
    killAllAsync();
    enmKillAll();
    unless ($TIMEOUT == 0) goto MBossCard3_428 @ 4;
    etCancel(640.0f);
    goto MBossCard3_448 @ 4;
MBossCard3_428:
    etClear(640.0f);
MBossCard3_448:
    spellEnd();
    funcSet(0);
    reset();
    playSound(27);
    moveVel(0.0f, 0.0f);
    moveVelTime(0, 0, 0.0f, 0.0f);
    movePosTime(0, 0, 0.0f, 0.0f);
    $MISS_COUNT = 0;
    $BOMB_COUNT = 0;
    $CAPTURE = 1;
    $CAPTURE = 1;
    setNext(0, 0, 3000, "MBossDead");
    setTimeout(0, "MBossEscape");
    spellEx(108, 3000, 500000, "Memoires de la haine et de la destruction.");
    movePosTime(60, 4, 0.0f, 144.0f);
    moveLimit(0.0f, 128.0f, 120.0f, 64.0f);
    wait(60);
    anmPlay(1, 73);
+90: //94
    nop();
    MBossCard3_at_Open();
	wait(100000);
}
void MBossCard3_at_Open()
{
	etNew(0);
	etAim(0, 3);
	etCount(0, 15, 1);
	etSpeed(0, 4f, 4f);
	etSprite(0, 33, 0);
	etAngle(0, rad(-90), 0f);
	
	etNew(1);
	etAim(1, 3);
	etCount(1, 20, 3);
	etSpeed(1, 2f, 4f);
	etSprite(1, 33, 6);
	etAngle(1, rad(90), rad(10));
	etEx(1, 0, EX_ANIM, 0, NEG, NEGF, NEGF);
	
	
	float angle = rad(-90);
	float A = 20;
	float B = 1f;
	etEx(0, 0, EX_ANIM, 0, NEG, NEGF, NEGF);
	etEx(0, 0, EX_SIZE, 30, 0, 1.0f, 0.75f);
	while(1)
	{
		MBossCard3_at() async;
		GI3 = 1;
		times(250)
		{
			etOn(0);
			wait(1);
		}
		GI3 = 0;
		times(150)
		{
			etOn(0);
			wait(1);
		}
		A = 15;
		times(180)
		{
			etCount(0, _S(A), 1);
			etAngle(0, angle, 0f);
			etOn(0);
			wait(1);
			A = A - 15f/200f;
			angle += rad(1)*B;
		}
		times(180)
		{
			etCount(0, _S(A), 1);
			etAngle(0, angle, 0f);
			etOn(0);
			wait(1);
			A = A + 15f/200f;
			angle -= rad(1)*B;
		}
		B *= -1f;
		etCount(0, 15, 1);
		wait(10);
		etOn(1);
	}
}

void MBossCard3_at()
{
	etNew(2);
	etAim(2, 3);
	etDist(2, 40f);
	etCount(2, 10, 1);
	etSpeed(2, 2f, 2f);
	etSprite(2, 22, 0);
	etAngle(2, RANDRAD, rad(0));
	etEx(2, 0, EX_ANIM, 0, NEG, NEGF, NEGF);
	etEx(2, 0, EX_ACCEL, 30, NEG, 0f, rad(1));
	etEx(2, 0, EX_WAIT, 90, NEG, NEGF, NEGF);
	etExSet(2, 4, 0, EX_DELETE, 0, NEG, NEGF, NEGF);
	wait(40);
	while(1)
	{
		if(GI3 == 1)
		{
			etExSet(2, 3, 0, EX_SPECIAL, NEG, NEG, NEGF, NEGF);
			etExSub(2, 3, "MBossCard3_Explosion");
		}else{
			etExSet(2, 3, 0, EX_SPECIAL, NEG, NEG, NEGF, NEGF);
			etExSub(2, 3, "");
		}
		etOffsetAbs(2, PLAYER_X, PLAYER_Y);
		etOn(2);
		wait(40);
	}
}

void MBossCard3_Explosion()
{
	etNew(3);
	etAim(3, 1);
	etAngle(3, ANGLE_PLAYER, 0f);
	etSpeed(3, 10f, 10f);
	laserNew(3, 0f, 400f, 0f, 10f);
	laserTiming(3, 60, 10, 20, 10, 0);
	laserStOn(3, 0);
}

void MBossDead()
{
    flagSet(32);
    anmSetSprite(1, -1);
    anmSetSprite(2, -1);
    spellEnd();
    enmKillAll();
    fog(0.0f, 16748431);

    if ($DIFF <= 1){ //goto MBossDead_476 @ 0;
		if ($TIMEOUT == 0){ //goto MBossDead_396 @ 0;
			enmCreate("Ecl_EtBreak", 0.0f, 0.0f, 9999, 0, 0);
		}else{
			enmCreate("Ecl_EtBreak_ni", 0.0f, 0.0f, 9999, 0, 0);
		}
	}
    if ($TIMEOUT == 0){ //goto MBossDead_600 @ 0;
		etCancel(640.0f);
	}else{
		etClear(640.0f);
	}

    anmPlay(1, 65);
    moveLimitReset();
    lifeSet(1000);
    dropClear();
    if ($CAPTURE != 0){ //goto MBossDead_820 @ 0;
		dropMain(5);
	}else{
		dropMain(7);
	}
    dropExtra(1, 50);
    dropExtra(2, 50);
    dropArea(64.0f, 64.0f);
    dropItems();
    setBoss(-1);
    flagSet(3);
    setScreenShake(30, 12, 0);
    anmPlay(0, 28);
    playSound(5);
    ins_570();
    delete();
}

void MBossEscape()
{
    setNext(0, -1, 0, "");
    setNext(1, -1, 0, "");
    spellEnd();
    moveLimitReset();
    enmKillAll();
    unless ($TIMEOUT == 0) goto MBossEscape_280 @ 0;
    etCancel(640.0f);
    goto MBossEscape_300 @ 0;
MBossEscape_280:
    etClear(640.0f);
MBossEscape_300:
    lifeSet(100000);
    setBoss(-1);
    flagSet(16);
    movePosTime(60, 4, 0.0f, -32.0f);
    wait(60);
    delete();
    delete();
}
